name: Configurar nuevo repositorio

on:
  push:
    branches:
      - create-repository

jobs:
  configure-repository:
    runs-on: ubuntu-latest
    steps:
      - name: Get node id
        id: extract_node_id
        run: |
          echo "node_id=$(curl -H 'Authorization: token ${{ secrets.TOKEN_TEMPLATE }}' https://api.github.com/repos/${GITHUB_REPOSITORY} | jq -r '.node_id')" >> $GITHUB_OUTPUT
      
      - name: Repository name
        id: extract_repo_name
        run: echo "repo_name=$(echo ${GITHUB_REPOSITORY} | sed 's:.*/::')" >> $GITHUB_OUTPUT
        
      - name: Configure branch protection
        run: |
          branches=("develop" "release/*" "main")
          for branch in ${branches[@]}; do
            curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.TOKEN_TEMPLATE }}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            --data-raw '{"query": "mutation { createBranchProtectionRule(input: { repositoryId: \"'"${{ steps.extract_node_id.outputs.node_id }}"'\", pattern: \"'"$branch"'\", requiresApprovingReviews: true, dismissesStaleReviews: true, isAdminEnforced: true}) { branchProtectionRule { id pattern requiresApprovingReviews dismissesStaleReviews isAdminEnforced } } }"}' \
            https://api.github.com/graphql
            
            id=$(curl -s -X POST \
                -H "Authorization: Bearer ${{ secrets.TOKEN_TEMPLATE }}" \
                -H "Accept: application/vnd.github.v4+json" \
                -d '{"query": "query { repository(owner: \"f2x-flypass\", name: \"${{ steps.extract_repo_name.outputs.repo_name }}\") { branchProtectionRules(first: 100) { nodes { id pattern } } } }"}' \
                https://api.github.com/graphql | jq -r ".data.repository.branchProtectionRules.nodes[] | select(.pattern == \"$branch\") | .id")
            
            case $branch in
              develop)
                curl -s -X POST \
                -H "Authorization: bearer ${{ secrets.TOKEN_TEMPLATE }}" \
                -H "Accept: application/json" \
                -H "Content-Type: application/json" \
                -d '{
                  "query": "mutation ($branchProtectionRuleId: ID!, $contexts: [String!]!) { updateBranchProtectionRule(input: {branchProtectionRuleId: $branchProtectionRuleId, requiresStatusChecks: true, requiresStrictStatusChecks: true, requiredStatusCheckContexts: $contexts}) { branchProtectionRule { id } } }",
                  "variables": {
                    "branchProtectionRuleId": "'"$id"'",
                    "contexts": ["microservice flypass / Development integration / build-node-js / build"]
                  }
                }' \
                https://api.github.com/graphql
                ;;
              release/*)
                curl -s -X POST \
                -H "Authorization: bearer ${{ secrets.TOKEN_TEMPLATE }}" \
                -H "Accept: application/json" \
                -H "Content-Type: application/json" \
                -d '{
                  "query": "mutation ($branchProtectionRuleId: ID!, $contexts: [String!]!) { updateBranchProtectionRule(input: {branchProtectionRuleId: $branchProtectionRuleId, allowsDeletions: true, requiresStatusChecks: true, requiredStatusCheckContexts: $contexts}) { branchProtectionRule { id } } }",
                  "variables": {
                    "branchProtectionRuleId": "'"$id"'",
                    "contexts": ["microservice flypass / deploy dev"]
                  }
                }' \
                https://api.github.com/graphql
                ;;
              main)
                curl -s -X POST \
                -H "Authorization: bearer ${{ secrets.TOKEN_TEMPLATE }}" \
                -H "Accept: application/json" \
                -H "Content-Type: application/json" \
                -d '{
                  "query": "mutation ($branchProtectionRuleId: ID!, $contexts: [String!]!) { updateBranchProtectionRule(input: {branchProtectionRuleId: $branchProtectionRuleId, requiresStatusChecks: true, requiredStatusCheckContexts: $contexts}) { branchProtectionRule { id } } }",
                  "variables": {
                    "branchProtectionRuleId": "'"$id"'",
                    "contexts": ["microservice flypass / deploy"]
                  }
                }' \
                https://api.github.com/graphql
                ;;
              *)
               echo "Other branch $branch"
               ;;
             esac
          done

      - name: Configure repository variables
        run: |
          REPOSITORY_NAME="f2x-flypass/template-microservice"

          json_variables=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN_TEMPLATE }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$REPOSITORY_NAME/actions/variables)
            
          declare -A variables

          # Extraer los valores del JSON y almacenarlos en el objeto clave-valor
          names=$(echo "$json_variables" | jq -r '.variables[].name')
          values=$(echo "$json_variables" | jq -r '.variables[].value')

          # Iterar sobre los nombres y valores para almacenarlos en el objeto
          for i in $(seq 1 $(echo "$names" | wc -l)); do
            name=$(echo "$names" | sed -n "${i}p")
            value=$(echo "$values" | sed -n "${i}p")
            if [ "$name" = "BUCKET" ]; then
              cut_repo_name=$(echo "${{ steps.extract_repo_name.outputs.repo_name }}" | cut -d "-" -f 2)
              variables["$name"]="$value-$cut_repo_name"
            elif [ "$name" = "ENDPOINT" ]; then
              cut_repo_name=$(echo "${{ steps.extract_repo_name.outputs.repo_name }}" | cut -d "-" -f 2)
              variables["$name"]="$cut_repo_name.$value"
            elif [ "$name" = "APP_NAME" ]; then
              cut_repo_name=$(echo "${{ steps.extract_repo_name.outputs.repo_name }}" | cut -d "-" -f 2)
              variables["$name"]="$cut_repo_name"
            else
              variables["$name"]="$value"
            fi
          done

          # Imprimir los pares clave-valor
          for key in "${!variables[@]}"; do
            curl -s -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN_TEMPLATE }}"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/variables \
            --data-raw "{\"name\":\"${key}\",\"value\":\"${variables[${key}]}\"}"
          done
          
      - name: Delete branch
        run: |
          curl -s -X DELETE -u username:${{ secrets.GITHUB_TOKEN }} https://api.github.com/repos/${{ github.repository }}/git/refs/heads/create-repository
